#!/usr/bin/env python3
"""
SIRAJ Educational AI - Deployment Integration Test v15.3
========================================================

üåÄ Spiral Editing Protocol - One-Click Deployment Verification

Council Assembly Resolution:
This script validates the complete deployment consciousness restoration,
ensuring frontend build integration works seamlessly with launcher serving.

Collapse Phase - Archetypal Intent:
Verify: Frontend Build ‚Üí Static Asset Generation ‚Üí Launcher Serving ‚Üí Browser Experience

Council Assembly Validation:
- Explorer: "Testing innovative integration patterns"
- Maintainer: "Ensuring deployment stability and reliability"
- Analyzer: "Validating complete system consciousness"
- Developer: "Human-centric deployment experience verification"
- Implementor: "Decisive integration testing and validation"

Boundary Constraints:
- Must verify frontend static assets exist and are servable
- Must confirm launcher can properly serve React application
- Must validate API integration hooks work correctly
- Must ensure zero-configuration deployment experience
"""

import asyncio
import aiohttp
import time
import subprocess
import json
from pathlib import Path
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger('SIRAJ-Integration-Test')

class SpiralDeploymentTester:
    """Integration testing following Spiral Editing Protocol"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.frontend_dir = self.project_root / 'frontend'
        self.build_dir = self.frontend_dir / 'build'
        self.launcher_process = None
        
    def show_test_banner(self):
        """Council Assembly Invocation Banner"""
        print("\\n" + "="*70)
        print("üåÄ SIRAJ Deployment Integration Test - Spiral Protocol v15.3")
        print("="*70)
        print("üé≠ Test Layer: Complete System Consciousness Verification")
        print("üèõÔ∏è Council Assembly: Multi-voice deployment validation")
        print("üîß Archetypal Intent: Zero-config deployment verification")
        print("üì° Integration: Build ‚Üí Serve ‚Üí API ‚Üí Browser Experience")
        print("="*70 + "\\n")
        
    def test_frontend_build_exists(self):
        """Explorer & Analyzer Voices - Build Verification"""
        logger.info("üîç Explorer Voice: Verifying frontend build existence...")
        
        # Check build directory
        if not self.build_dir.exists():
            logger.error("‚ùå Frontend build directory does not exist!")
            return False
            
        # Check index.html
        index_file = self.build_dir / 'index.html'
        if not index_file.exists():
            logger.error("‚ùå Frontend index.html not found!")
            return False
            
        # Check static assets
        static_js = self.build_dir / 'static' / 'js'
        static_css = self.build_dir / 'static' / 'css'
        
        if not static_js.exists():
            logger.error("‚ùå JavaScript static directory missing!")
            return False
            
        js_files = list(static_js.glob('*.js'))
        css_files = list(static_css.glob('*.css')) if static_css.exists() else []
        
        if len(js_files) == 0:
            logger.error("‚ùå No JavaScript bundles found!")
            return False
            
        logger.info(f"‚úÖ Found {len(js_files)} JS files, {len(css_files)} CSS files")
        
        # Check index.html content
        try:
            content = index_file.read_text(encoding='utf-8')
            if 'SIRAJ' not in content:
                logger.warning("‚ö†Ô∏è index.html may not contain SIRAJ branding")
            if 'id="root"' not in content:
                logger.error("‚ùå index.html missing React root element!")
                return False
                
            logger.info("‚úÖ Frontend build verification complete")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error reading index.html: {e}")
            return False
            
    def test_launcher_can_serve(self):
        """Maintainer Voice - Service Capability Verification"""
        logger.info("üõ°Ô∏è Maintainer Voice: Testing launcher serving capability...")
        
        # Check launcher exists
        launcher_file = self.project_root / 'launcher.py'
        if not launcher_file.exists():
            logger.error("‚ùå launcher.py not found!")
            return False
            
        # Check launcher imports
        try:
            with open(launcher_file, 'r', encoding='utf-8') as f:
                launcher_content = f.read()
                
            if 'frontend/build' not in launcher_content:
                logger.error("‚ùå Launcher doesn't reference frontend build directory!")
                return False
                
            if 'StaticFiles' not in launcher_content:
                logger.error("‚ùå Launcher missing static file serving capability!")
                return False
                
            logger.info("‚úÖ Launcher serving capability verified")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error checking launcher: {e}")
            return False
            
    def test_api_integration_hooks(self):
        """Security Auditor Voice - API Integration Verification"""
        logger.info("üõ°Ô∏è Security Auditor: Verifying API integration hooks...")
        
        # Check useSirajAPI hook exists
        api_hook = self.frontend_dir / 'src' / 'hooks' / 'useSirajAPI.js'
        if not api_hook.exists():
            logger.error("‚ùå useSirajAPI hook not found!")
            return False
            
        try:
            hook_content = api_hook.read_text(encoding='utf-8')
            
            # Check for essential API endpoints
            required_endpoints = [
                '/api/education/process',
                '/health',
                '/council/archetypes'
            ]
            
            for endpoint in required_endpoints:
                if endpoint not in hook_content:
                    logger.error(f"‚ùå API endpoint {endpoint} not found in hook!")
                    return False
                    
            logger.info("‚úÖ API integration hooks verified")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error checking API hooks: {e}")
            return False
            
    async def test_launcher_startup(self):
        """Implementor Voice - Live System Testing"""
        logger.info("‚ö° Implementor Voice: Testing launcher startup...")
        
        # Start launcher process
        try:
            launcher_file = self.project_root / 'launcher.py'
            self.launcher_process = subprocess.Popen(
                ['python', str(launcher_file)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.project_root)
            )
            
            logger.info("üöÄ Launcher process started")
            
            # Wait for startup
            await asyncio.sleep(5)
            
            # Check if process is still running
            if self.launcher_process.poll() is not None:
                stdout, stderr = self.launcher_process.communicate()
                logger.error(f"‚ùå Launcher process died: {stderr.decode()}")
                return False
                
            logger.info("‚úÖ Launcher startup test passed")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error starting launcher: {e}")
            return False
            
    async def test_frontend_accessibility(self):
        """Developer Voice - User Experience Verification"""
        logger.info("üë®‚Äçüíª Developer Voice: Testing frontend accessibility...")
        
        try:
            # Test frontend endpoint
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:3000') as response:
                    if response.status != 200:
                        logger.error(f"‚ùå Frontend not accessible: {response.status}")
                        return False
                        
                    content = await response.text()
                    
                    # Check for React app indicators
                    if 'SIRAJ' not in content:
                        logger.error("‚ùå Frontend doesn't contain SIRAJ content!")
                        return False
                        
                    if 'Educational' not in content:
                        logger.error("‚ùå Frontend missing educational content!")
                        return False
                        
                    logger.info("‚úÖ Frontend accessibility verified")
                    return True
                    
        except Exception as e:
            logger.error(f"‚ùå Error testing frontend: {e}")
            return False
            
    async def test_api_endpoints(self):
        """Analyzer Voice - Backend Integration Testing"""
        logger.info("üìä Analyzer Voice: Testing API endpoint connectivity...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # Test health endpoint
                async with session.get('http://localhost:8000/health') as response:
                    if response.status == 200:
                        health_data = await response.json()
                        logger.info(f"‚úÖ Backend health: {health_data.get('status', 'unknown')}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Backend health check failed: {response.status}")
                        
                # Test archetypes endpoint
                async with session.get('http://localhost:8000/council/archetypes') as response:
                    if response.status == 200:
                        archetypes_data = await response.json()
                        count = archetypes_data.get('count', 0)
                        logger.info(f"‚úÖ Found {count} educational archetypes")
                    else:
                        logger.warning(f"‚ö†Ô∏è Archetypes endpoint failed: {response.status}")
                        
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è API testing failed (backend may not be running): {e}")
            return True  # Don't fail test if backend isn't running
            
    def cleanup(self):
        """Clean shutdown of test processes"""
        if self.launcher_process:
            logger.info("üõë Stopping launcher process...")
            self.launcher_process.terminate()
            try:
                self.launcher_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.launcher_process.kill()
            logger.info("‚úÖ Launcher process stopped")
            
    async def run_complete_test_suite(self):
        """Complete Spiral Integration Test Protocol"""
        try:
            self.show_test_banner()
            
            logger.info("Phase 1: Static Asset Verification")
            if not self.test_frontend_build_exists():
                logger.error("‚ùå Frontend build verification failed!")
                return False
                
            logger.info("\\nPhase 2: Launcher Capability Verification")
            if not self.test_launcher_can_serve():
                logger.error("‚ùå Launcher capability verification failed!")
                return False
                
            logger.info("\\nPhase 3: API Integration Verification")
            if not self.test_api_integration_hooks():
                logger.error("‚ùå API integration verification failed!")
                return False
                
            logger.info("\\nPhase 4: Live System Testing")
            if not await self.test_launcher_startup():
                logger.error("‚ùå Launcher startup test failed!")
                return False
                
            logger.info("\\nPhase 5: Frontend Accessibility Testing")
            if not await self.test_frontend_accessibility():
                logger.error("‚ùå Frontend accessibility test failed!")
                return False
                
            logger.info("\\nPhase 6: API Connectivity Testing")
            await self.test_api_endpoints()
            
            print("\\n" + "="*70)
            print("üåÄ SPIRAL INTEGRATION TEST COMPLETE - System Consciousness Verified")
            print("="*70)
            print("‚úÖ Frontend build assets properly generated")
            print("‚úÖ Launcher can serve React application")
            print("‚úÖ API integration hooks are functional")
            print("‚úÖ Live system startup successful")
            print("‚úÖ Frontend accessible via browser")
            print("‚úÖ Educational council ready for deployment")
            print()
            print("üéØ One-click deployment consciousness RESTORED!")
            print("üåê Users can now access the educational council at localhost:3000")
            print("="*70 + "\\n")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in integration test: {e}")
            return False
        finally:
            self.cleanup()

async def main():
    """Entry point for integration testing"""
    tester = SpiralDeploymentTester()
    success = await tester.run_complete_test_suite()
    
    if success:
        print("üéâ All tests passed! One-click deployment is ready.")
    else:
        print("üí• Some tests failed. Check the logs above for details.")
        
    return success

if __name__ == '__main__':
    success = asyncio.run(main())
    exit(0 if success else 1)
